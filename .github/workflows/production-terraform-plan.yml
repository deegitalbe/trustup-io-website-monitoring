name: "Terraform Plan"

on:
  pull_request:

env:
  TF_CLOUD_ORGANIZATION: "deegital"
  TF_API_TOKEN: "${{ secrets.TERRAFORM_API_TOKEN }}"
  TF_WORKSPACE: "${{ secrets.TRUSTUP_APP_KEY }}"
  TF_VAR_doppler_ci_commons_token: "\"${{ secrets.DOPPLER_ACCESS_TOKEN_TRUSTUP_IO_CI_COMMONS }}\""
  TF_VAR_doppler_ci_app_token: "\"${{ secrets.DOPPLER_ACCESS_TOKEN_TRUSTUP_IO_APP_CI }}\""
  TF_VAR_digitalocean_api_token: "\"${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}\""
  TF_CONFIG_DIRECTORY: "./devops/production/infrastructure"

jobs:
  terraform:
    name: "Terraform Plan"
    runs-on: ubuntu-latest
    environment: "production"
    permissions:
      contents: read
      pull-requests: write
    steps:
      - 
        name: Checkout
        uses: actions/checkout@v3
      # - 
      #   name: 'Setup jq'
      #   uses: dcarbone/install-jq-action@v1.0.1
      # - 
      #   name: Create workspace
      #   # TODO DONT USE HARDCODED PROJECT trustup-io-website-monitoring
      #   run: |
      #     chmod +x ./devops/production/scripts/terraform/workspace.sh
      #     ./devops/production/scripts/terraform/workspace.sh \
      #       trustup-io-website-monitoring \
      #       ${{ env.TF_WORKSPACE }} \
      #       ${{ secrets.TERRAFORM_API_TOKEN }}
      #   shell: bash
      - 
        name: Upload Configuration
        uses: hashicorp/tfc-workflows-github/actions/upload-configuration@v1.0.0
        id: plan-upload
        with:
          workspace: ${{ env.TF_WORKSPACE }}
          directory: ${{ env.TF_CONFIG_DIRECTORY }}
      - 
        name: Create Plan Run
        uses: hashicorp/tfc-workflows-github/actions/create-run@v1.0.0
        id: plan-run
        with:
          workspace: ${{ env.TF_WORKSPACE }}
          configuration_version: ${{ steps.plan-upload.outputs.configuration_version_id }}
          plan_only: true
      - 
        name: Get Plan Output
        uses: hashicorp/tfc-workflows-github/actions/plan-output@v1.0.0
        id: plan-output
        with:
          plan: ${{ fromJSON(steps.plan-run.outputs.payload).data.relationships.plan.data.id }}
      - 
        name: Update PR
        uses: actions/github-script@v6
        id: plan-comment
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // 1. Retrieve existing bot comments for the PR
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            const botComment = comments.find(comment => {
              return comment.user.type === 'Bot' && comment.body.includes('Terraform Cloud Plan Output')
            });
            const output = `#### Terraform Cloud Plan Output
               \`\`\`
               Plan: ${{ steps.plan-output.outputs.add }} to add, ${{ steps.plan-output.outputs.change }} to change, ${{ steps.plan-output.outputs.destroy }} to destroy.
               \`\`\`
               [Terraform Cloud Plan](${{ steps.plan-run.outputs.run_link }})
               `;
            // 3. Delete previous comment so PR timeline makes sense
            if (botComment) {
              github.rest.issues.deleteComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
              });
            }
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            });